package org.jpk.kafka.config;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.jpk.kafka.service.KafkaConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.listener.DeadLetterPublishingRecoverer;
import org.springframework.kafka.listener.DefaultErrorHandler;
import org.springframework.util.backoff.FixedBackOff;


import java.util.HashMap;
import java.util.Map;

/**
 * Configuration class for {@link org.jpk.kafka.service.KafkaConsumer} kafka listener class.
 */
@Configuration
public class KafkaConfiguration {

    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaConsumer.class);

    @Value("${spring.kafka.consumer.group-id}")
    private String groupId;

    @Value("${spring.kafka.consumer.auto-offset-reset}")
    private String autoOffsetReset;

    @Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;

    @Value("${spring.kafka.dlq-topic}")
    private String dlqTopic;


    private static final Long RETRY_POLICY_INTERVAL_MS = 2000L;
    private static final Long RETRY_POLICY_MAX_ATTEMPTS = 2L;

    /**
     * Kafka Consumer Properties setup
     *
     * @return HashMap of kafka Consumer properties
     */
    @Bean
    public Map<String, Object> consumerConfigs() {
        Map<String, Object> props = new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset);
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        return props;
    }

    /**
     * Inject properties to ConsumerFactory
     *
     * @return ConsumerFactory instance
     */
    @Bean
    public ConsumerFactory<String, String> consumerFactory() {
        return new DefaultKafkaConsumerFactory<>(consumerConfigs());
    }

    /**
     * Sending message to DLQ with the same partition.
     *
     * @param dlqKafkaTemplate DLQ producer. Will be autogenerated by Spring and injected from context.
     * @return DeadLetterPublishingRecoverer that will send to DLQ-topic with the same partition as original.
     */
    @Bean
    public DeadLetterPublishingRecoverer recoverer(KafkaTemplate<Object, Object> dlqKafkaTemplate) {
        return new DeadLetterPublishingRecoverer(dlqKafkaTemplate, (customerRecord, exception)
                -> new TopicPartition(dlqTopic, customerRecord.partition()));
    }

    /**
     * Retry policy settings
     *
     * @return ErrorHandler with Retry policy.
     */
    @Bean
    public DefaultErrorHandler errorHandler(DeadLetterPublishingRecoverer publishingRecoverer) {
        FixedBackOff backOff = new FixedBackOff(RETRY_POLICY_INTERVAL_MS, RETRY_POLICY_MAX_ATTEMPTS);
        DefaultErrorHandler defaultErrorHandler = new DefaultErrorHandler(publishingRecoverer, backOff);

        defaultErrorHandler.setRetryListeners((record, ex, deliveryAttempt) -> {
            LOGGER.error("Retry attempt {} exhausted for message: {}. Error: {}", deliveryAttempt, record.value(), ex.getMessage());
        });
        return defaultErrorHandler;
    }

    /**
     * Create KafkaListenerContainer
     * @return new instance of ConcurrentKafkaListenerContainerFactory with all the setups.
     */
    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, String> customKafkaListenerContainerFactory(
        ConsumerFactory<String, String> consumerKafkaFactory, DefaultErrorHandler errorHandler){

        ConcurrentKafkaListenerContainerFactory<String, String> factory =
                new ConcurrentKafkaListenerContainerFactory<>();

        factory.setConsumerFactory(consumerKafkaFactory);
        factory.setCommonErrorHandler(errorHandler);

        return factory;
    }
}